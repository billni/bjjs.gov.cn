a<-1:10
b<-data.frame(NA, a, NA, NA)
b
rankall <- function(outcome, num="best"){
hdata <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header=T)
disease_name_list <- c("heart attack","heart failure","pneumonia")
if(!any(disease_name_list == outcome)) stop("invalid outcome")
  ## appear state list uniquely that was sorted in alphabetical order
  statelist <- sort(unique(hdata$State))
  ## initial result
  result <- data.frame(NA, statelist, NA, NA)
  names(result) <- c("hospital", "state", "ill", "rate")
  ## appear ill vector with respective name    
mortality <- c(11,17,23)
names(mortality) <- disease_name_list
## appear data frame with 3 columns , hospital_name , state name and mortality rate
amd <- hdata[, c(2, 7, mortality[outcome])]   
  for (state in statelist) {
    ## mortality data frame in each state     
    esd <- amd[amd$State == state, ]        
  esd <- data.frame(esd, "Rate"=as.numeric(esd[,3]), stringsAsFactors=FALSE)   
if (num=="worst") num <- nrow(esd)
if (num=="best") num <- 1   
  ##order 4th and 1th column
  esd <- esd[order(esd[,4], esd[,1]),]  
  ## assemble result data frame
  if (num <= nrow(esd) && result$hospital==state) {   
     result[result$hospital==state,] <- esd[num,]
  }
  }    
  return(result)
}
head(rankall("heart attack", 20), 10)
q()
q()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringsAsFactors=F)
mydf <- read.csv(path2csv, stringsAsFactors=F)
mydf <- read.csv(path2csv, stringsAsFactors=F)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydr)
rm(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20\
5:20
 select(cran, r_arch:country) 
 select(cran, country:r_arch) 
cran
select(cran, -time) 
select(cran, -50:20)
select(cran, -5:20)
select(cran, -5:20)
select(cran, 5:20)
-5:20
-5:-20
-(5:20)
select(cran, 5:20)
select(cran, time:5)
select(cran, -(5:20))
select(cran, -(time:20))
select(cran, -(5:20))
select(cran, -(time:5:20))
info()
select(cran, -(time:20))
select(cran, -(X:size))
filter(cran, package == "swirl") 
(cran, r_version ==
filter(cran, r_version == "3.1.1", country=="US")
?comparison
?Comparison
filter(cran, r_version <= "3.0.2", country=="IN")
 filter(cran,
| country == "US" | country == "IN")
 filter(cran,country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10)).
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10)).
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_ide)
arrange(cran2, ip_id)
desc(ip_id)
desc(cran, ip_id)
arrange(cran2, desc(ip_id))
 arrange(cran2, package, ip_id) 
 arrange(cran2, country, desc(r_version), ip_id) 
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb= size/2^20)
mutate(cran3, size_mb= size/2^20,size_gb=size_mb/2^10)
mutate(cran3, size_mb= size/2^20,size_gb=size_mb/2^10, correct_size)
mutate(cran3, size_mb= size/2^20,size_gb=size_mb/2^10, correct_size=size_mb/1000)
 mutate(cran3, correct_size = size + 1000)
 summarize(cran, avg_bytes = mean(size)) 
q()
rm(list=ls())
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.update.R")
data.update()
data.update()
data.update()
install.packages("XML")
library(XML)
data.update()
ls
getwd()
cd d:/
setwd("d:/workcontext/projects/git/bjjs.gov.cn")
getwd()
mkdir csv
mkdir("csv")
mkdir("csv")
data.update()
require(XML)
fdc.url <- 'http://www.bjjs.gov.cn/tabid/2167/default.aspx'
html <- htmlTreeParse(fdc.url, useInternalNode=T)
data.tables <- getNodeSet(html, path = "//tbody[7]//table//tr")
values<- sapply(data.tables, xmlValue)
values <- gsub("\r","", values)
values <- gsub("\n","", values)
values <- gsub("\t",",", values)
values <- gsub(" ", "", values)
values <- gsub(",,," , ",", values)
values <- gsub(",," , ",", values)
values <- gsub("," , "", values)
values <- gsub("\u00a0" , "", values)
filename <- paste("csv/bjjs.gov.cn/",Sys.Date(), ".txt", sep="")
write(values, filename)
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.update.R")
data.update()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.merge.R")
data.merge()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.merge.R")
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.merge.R")
pdf.options(family='GB1')
pdf("bjjs.gov.cn.pdf")
path <- "datafile"
all.data <- data.frame(no=1:91)
files <- dir(path, full.names=T)
for(filename in files) {
  data1 <- read.table(filename, header=F, blank.lines.skip = TRUE, stringsAsFactors=F)
  data1 <- data1[c(2:46,48:93),]
  data1 <- data.frame(data1)
  res <- strsplit(as.vector(data1[,1]), ": ")
  data1 <- data.frame(name= sapply(res, "[", 1), value= as.numeric(sapply(res, "[", 2)))
  all.data <- data.frame(all.data, name=data1[,1], d1=data1[,2])
  }
nona.data <- na.omit(all.data)
titles <- all.data[which(is.na(all.data$d1)),2]
j<-1
opar <- par(no.readonly=T)
par(lty=2, pch=19, mfrow=c(2,2))
loopnum <- nrow(nona.data)
cols <- seq(from=3, to=length(all.data), by=2)
for(i in 1:loopnum) {
   plot(t(nona.data[i,cols]), type="b", col=rainbow(10), xlab=nona.data[i,2], ylab="值")
   text(x=1:length(cols), y=t(nona.data[i,cols]), t(nona.data[i,cols]))
   if(i %% 10 == 1) {       
title(main=titles[j])
        j<-j+1
   }
}
par(opar)
dev.list()
dev.list()
dev.off(2)
pdf("bjjs.gov.cn.pdf")
path <- "datafile"
all.data <- data.frame(no=1:91)
files <- dir(path, full.names=T)
for(filename in files) {
  data1 <- read.table(filename, header=F, blank.lines.skip = TRUE, stringsAsFactors=F)
  data1 <- data1[c(2:46,48:93),]
  data1 <- data.frame(data1)
  res <- strsplit(as.vector(data1[,1]), "：")
  data1 <- data.frame(name= sapply(res, "[", 1), value= as.numeric(sapply(res, "[", 2)))
  all.data <- data.frame(all.data, name=data1[,1], d1=data1[,2])
  }
nona.data <- na.omit(all.data)
titles <- all.data[which(is.na(all.data$d1)),2]
j<-1
opar <- par(no.readonly=T)
par(lty=2, pch=19, mfrow=c(2,2))
loopnum <- nrow(nona.data)
cols <- seq(from=3, to=length(all.data), by=2)
for(i in 1:loopnum) {
   plot(t(nona.data[i,cols]), type="b", col=rainbow(10), xlab=nona.data[i,2], ylab="值")
   text(x=1:length(cols), y=t(nona.data[i,cols]), t(nona.data[i,cols]))
   if(i %% 10 == 1) {       
title(main=titles[j])
        j<-j+1
   }
}
par(opar)
dev.list()
dev.off(2)
q()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.update.R")
data.update()
data.update()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.merge.R")
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.merge.R")
pdf.options(family='GB1')
pdf("bjjs.gov.cn.pdf")
path <- "datafile"
all.data <- data.frame(no=1:91)
files <- dir(path, full.names=T)
for(filename in files) {
  data1 <- read.table(filename, header=F, blank.lines.skip = TRUE, stringsAsFactors=F)
  data1 <- data1[c(2:46,48:93),]
  data1 <- data.frame(data1)
  res <- strsplit(as.vector(data1[,1]), "：")
  data1 <- data.frame(name= sapply(res, "[", 1), value= as.numeric(sapply(res, "[", 2)))
  all.data <- data.frame(all.data, name=data1[,1], d1=data1[,2])
  }
nona.data <- na.omit(all.data)
titles <- all.data[which(is.na(all.data$d1)),2]
j<-1
opar <- par(no.readonly=T)
par(lty=2, pch=19, mfrow=c(2,2))
loopnum <- nrow(nona.data)
cols <- seq(from=3, to=length(all.data), by=2)
for(i in 1:loopnum) {
   plot(t(nona.data[i,cols]), type="b", col=rainbow(10), xlab=nona.data[i,2], ylab="值")
   text(x=1:length(cols), y=t(nona.data[i,cols]), t(nona.data[i,cols]))
   if(i %% 10 == 1) {       
title(main=titles[j])
        j<-j+1
   }
}
par(opar)
dev.list()
dev.list()
dev.off(2)
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.merge.R")
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\data.merge.R")
q()
rm(list=ls())
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\upate.yishou.R")
update.yishou()
update.yishou()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\upate.yishou.R")
update.yishou()
rm(list=ls())
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\update.yishou.R")
update.yishou()
update.yishou()
update.yishou()
install.packages("XML")
library(XML)
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\update.yishou.R")
update.yishou()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\update.yishou.R")
update.yishou()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\update.cunliang.R")
update.cunliang()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\update.cunliang.R")
update.cunlaing.yue()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\update.cunliang.yue.R")
update.cunliang.yue()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\merge.yishou.R")
merge.yishou()
merge.yishou()
pdf.options(family='GB1')
pdf("bjjs.gov.cn.pdf")
path <- "datafile/bjjs.gov.cn/yishou"
all.data <- data.frame(no=1:91)
files <- dir(path, full.names=T)
for(filename in files) {
  data1 <- read.table(filename, header=F, blank.lines.skip = TRUE, stringsAsFactors=F)
  data1 <- data1[c(2:46,48:93),]
  data1 <- data.frame(data1)
  res <- strsplit(as.vector(data1[,1]), "：")
  data1 <- data.frame(name= sapply(res, "[", 1), value= as.numeric(sapply(res, "[", 2)))
  all.data <- data.frame(all.data, name=data1[,1], d1=data1[,2])
  }
nona.data <- na.omit(all.data)
titles <- all.data[which(is.na(all.data$d1)), length(all.data)-1]
j<-1
opar <- par(no.readonly=T)
par(lty=2, pch=19, mfrow=c(2,2))
loopnum <- nrow(nona.data)
cols <- seq(from=3, to=length(all.data), by=2)
for(i in 1:loopnum) {
   plot(t(nona.data[i,cols]), type="b", col=rainbow(10), xlab=nona.data[i,2], ylab="值")
   text(x=1:length(cols), y=t(nona.data[i,cols]), t(nona.data[i,cols]))
   if(i %% 10 == 1) {       
title(main=titles[j])
        j<-j+1
   }
}
par(opar)
dev.list()
dev.off()
dev.off(2)
dev.off(3)
all.data
path <- "datafile/bjjs.gov.cn/yishou"
all.data <- data.frame(no=1:91)
files <- dir(path, full.names=T)
for(filename in files) {
  data1 <- read.table(filename, header=F, blank.lines.skip = TRUE, stringsAsFactors=F)
  data1 <- data1[c(2:46,48:93),]
  data1 <- data.frame(data1)
  res <- strsplit(as.vector(data1[,1]), "：")
  data1 <- data.frame(name= sapply(res, "[", 1), value= as.numeric(sapply(res, "[", 2)))
  all.data <- data.frame(all.data, name=data1[,1], d1=data1[,2])
  }
all.data
rm(list=ls())
path <- "datafile/bjjs.gov.cn/yishou"
all.data <- data.frame(no=1:91)
files <- dir(path, full.names=T)
for(filename in files) {
  data1 <- read.table(filename, header=F, blank.lines.skip = TRUE, stringsAsFactors=F)
  data1 <- data1[c(2:46,48:93),]
  data1 <- data.frame(data1)
  res <- strsplit(as.vector(data1[,1]), "：")
  data1 <- data.frame(name= sapply(res, "[", 1), value= as.numeric(sapply(res, "[", 2)))
  all.data <- data.frame(all.data, name=data1[,1], d1=data1[,2])
  }
all.data
data1
datat1
data1
ls()
rm(list=ls())
path <- "datafile/bjjs.gov.cn/yishou"
all.data <- data.frame(no=1:91)
files <- dir(path, full.names=T)
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\merge.yishou.R")
merge.yishou()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\merge.cunliang.yue.R")
merge.cunliang()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\merge.yishou.R")
merge.yishou()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\merge.cunliang.R")
me
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\merge.cunliang.R")
merge.cunliang()
source("D:\\workcontext\\projects\\git\\bjjs.gov.cn\\script\\merge.cunliang.yue.R")
merge.cunliang()
merge.cunliang.yue()
q()
